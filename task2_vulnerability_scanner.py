import streamlit as st
import requests
from bs4 import BeautifulSoup

class WebScanner:
    def __init__(self, url):
        self.url = url
        self.sql_payloads = [
            "' OR 1=1 --", 
            "' OR 'a'='a", 
            "' UNION SELECT NULL, username, password FROM users --",
            "' OR 'x'='x"
        ]
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src='x' onerror='alert(1)'>",
            "<body onload=alert('XSS')>"
        ]

    # Method to extract form elements (input fields) from a page
    def extract_forms(self):
        response = requests.get(self.url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        form_details = []

        for form in forms:
            action = form.get('action', '').strip()
            method = form.get('method', 'get').lower()
            inputs = form.find_all('input')
            
            input_details = []
            for input_tag in inputs:
                input_type = input_tag.get('type', 'text')
                input_name = input_tag.get('name', '')
                input_details.append({'name': input_name, 'type': input_type})

            form_details.append({'action': action, 'method': method, 'inputs': input_details})

        return form_details

    # Method to test for SQL Injection vulnerabilities
    def test_sql_injection(self, params):
        found_vulnerabilities = []
        for payload in self.sql_payloads:
            for param in params:
                injection_url = f"{self.url}?{param}={payload}"
                response = requests.get(injection_url)
                if "error" in response.text or "warning" in response.text:
                    found_vulnerabilities.append(f"Potential SQL Injection on parameter: {param} with payload: {payload}")
        return found_vulnerabilities

    # Method to test for XSS vulnerabilities
    def test_xss(self, params):
        found_vulnerabilities = []
        for payload in self.xss_payloads:
            for param in params:
                xss_url = f"{self.url}?{param}={payload}"
                response = requests.get(xss_url)
                if payload in response.text:
                    found_vulnerabilities.append(f"Potential XSS vulnerability on parameter: {param} with payload: {payload}")
        return found_vulnerabilities

    # Method to scan a website for vulnerabilities
    def scan_website(self):
        st.write(f"Scanning {self.url} for vulnerabilities...\n")

        # Step 1: Extract forms from the webpage
        forms = self.extract_forms()
        all_vulnerabilities = []

        for form in forms:
            st.write(f"Scanning form with action: {form['action']}")
            method = form['method']
            params = [input_field['name'] for input_field in form['inputs']]
            
            # Step 2: Test for SQL Injection
            if method == 'get':
                sql_vulnerabilities = self.test_sql_injection(params)
                if sql_vulnerabilities:
                    all_vulnerabilities.extend(sql_vulnerabilities)
            
            # Step 3: Test for XSS
            xss_vulnerabilities = self.test_xss(params)
            if xss_vulnerabilities:
                all_vulnerabilities.extend(xss_vulnerabilities)
            
            st.write(f"Finished scanning form with action: {form['action']}\n")

        return all_vulnerabilities


# Streamlit interface
def main():
    st.title("Web Vulnerability Scanner")

    # User input for the URL to scan
    target_url = st.text_input("Enter the URL to scan:", "")
    
    # Submit button to start scanning
    if st.button("Start Scan") and target_url:
        scanner = WebScanner(target_url)
        with st.spinner("Scanning... Please wait."):
            vulnerabilities = scanner.scan_website()

        if vulnerabilities:
            st.subheader("Vulnerabilities Found:")
            for vuln in vulnerabilities:
                st.markdown(f"- {vuln}")
        else:
            st.success("No vulnerabilities found!")

if __name__ == "__main__":
    main()
